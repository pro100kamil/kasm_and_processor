in_source: |-
  ei
  loop:
    jmp loop

  int1:
    di
    input
    jz break,acc
    print
    ei
    jmp loop
  break:
    halt
in_stdin: |-
  [(0, 'K'), (10, 'A'), (20, 'M'), (30, 'I'), (40, 'L'), (50, '')]
out_code: |-
  [0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   {"index": 0, "opcode": "ei", "term": [1, 0, "ei"]},
   {"index": 1, "opcode": "jmp", "arg": 101, "term": [3, 0, "jmp loop"]},
   {"index": 2, "opcode": "di", "term": [6, 0, "di"]},
   {"index": 3, "opcode": "input", "term": [7, 0, "input"]},
   {"index": 4, "opcode": "jz", "arg": [108, "acc"], "term": [8, 0, "jz break,acc"]},
   {"index": 5, "opcode": "print", "term": [9, 0, "print"]},
   {"index": 6, "opcode": "ei", "term": [10, 0, "ei"]},
   {"index": 7, "opcode": "jmp", "arg": 101, "term": [11, 0, "jmp loop"]},
   {"index": 8, "opcode": "halt", "term": [13, 0, "halt"]}]
out_stdout: |
  source LoC: 13 code instr: 109
  ============================================================

  instr_counter:  1 ticks: 1
out_log: |
  DEBUG   machine:simulation    TICK:   0 PC: 100 ADDR:  29 MEM_OUT: 0 ACC: 0 rs: 0 	ei  ('ei'@1:0) 	0
  DEBUG   machine:simulation    TICK:   1 PC: 101 ADDR:  29 MEM_OUT: 0 ACC: 0 rs: 0 	jmp 101  ('jmp loop'@3:0) 	0
  DEBUG   machine:check_and_handle_interruption START HANDLING INTERRUPTION
  INFO    machine:simulation    output_buffer: ''
